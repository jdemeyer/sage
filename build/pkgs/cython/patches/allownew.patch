commit 33723430d13e12d9108bd5fad9d10113b35c5254
Author: Jeroen Demeyer <jdemeyer@cage.ugent.be>
Date:   Thu May 7 14:41:15 2015 +0200

    Allow __new__ as an ordinary method

diff --git a/Cython/Compiler/Symtab.py b/Cython/Compiler/Symtab.py
index c2f3ac8..1fb2184 100644
--- a/Cython/Compiler/Symtab.py
+++ b/Cython/Compiler/Symtab.py
@@ -1962,9 +1962,6 @@ class CClassScope(ClassScope):
         # Add an entry for a method.
         if name in ('__eq__', '__ne__', '__lt__', '__gt__', '__le__', '__ge__'):
             error(pos, "Special method %s must be implemented via __richcmp__" % name)
-        if name == "__new__":
-            error(pos, "__new__ method of extension type will change semantics "
-                "in a future version of Pyrex and Cython. Use __cinit__ instead.")
         entry = self.declare_var(name, py_object_type, pos,
                                  visibility='extern')
         special_sig = get_special_method_signature(name)
@@ -1981,8 +1978,6 @@ class CClassScope(ClassScope):
         return entry
 
     def lookup_here(self, name):
-        if name == "__new__":
-            name = EncodedString("__cinit__")
         entry = ClassScope.lookup_here(self, name)
         if entry and entry.is_builtin_cmethod:
             if not self.parent_type.is_builtin_type:
commit 7ea01c08d6b28ab848169dec508992dea025bdf6
Author: Jeroen Demeyer <jdemeyer@cage.ugent.be>
Date:   Thu May 7 15:22:31 2015 +0200

    Use __cinit__ instead of __new__ in lookup_here()

diff --git a/Cython/Compiler/ModuleNode.py b/Cython/Compiler/ModuleNode.py
index 7a9413f..a5d6b9b 100644
--- a/Cython/Compiler/ModuleNode.py
+++ b/Cython/Compiler/ModuleNode.py
@@ -1155,7 +1155,7 @@ class ModuleNode(Nodes.Node, Nodes.BlockNode):
         cpp_class_attrs = [entry for entry in scope.var_entries
                            if entry.type.is_cpp_class]
 
-        new_func_entry = scope.lookup_here("__new__")
+        new_func_entry = scope.lookup_here("__cinit__")
         if base_type or (new_func_entry and new_func_entry.is_special
                          and not new_func_entry.trivial_signature):
             unused_marker = ''
commit 14364e1ceb4d69f0b2b1db28c4ec43233e81be02
Author: Jeroen Demeyer <jdemeyer@cage.ugent.be>
Date:   Thu May 7 15:48:21 2015 +0200

    Add warning for __new__ and __del__

diff --git a/Cython/Compiler/Symtab.py b/Cython/Compiler/Symtab.py
index 1fb2184..9809434 100644
--- a/Cython/Compiler/Symtab.py
+++ b/Cython/Compiler/Symtab.py
@@ -1962,6 +1962,9 @@ class CClassScope(ClassScope):
         # Add an entry for a method.
         if name in ('__eq__', '__ne__', '__lt__', '__gt__', '__le__', '__ge__'):
             error(pos, "Special method %s must be implemented via __richcmp__" % name)
+        if name in ('__new__', '__del__'):
+            warning(pos, "Cython does not support special method %s, "
+                    "it will be compiled as a pure Python method" % name)
         entry = self.declare_var(name, py_object_type, pos,
                                  visibility='extern')
         special_sig = get_special_method_signature(name)
