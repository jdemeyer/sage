diff -ru src/IPython/kernel/launcher.py b/IPython/kernel/launcher.py
--- src/IPython/kernel/launcher.py	2015-07-12 17:44:05.000000000 +0200
+++ b/IPython/kernel/launcher.py	2015-09-04 15:41:39.415435942 +0200
@@ -208,6 +208,9 @@
         if independent:
             kwargs['preexec_fn'] = lambda: os.setsid()
         else:
+            # Create a new process group to be used by the Interrupt
+            # command to interrupt the kernel and its children
+            kwargs['preexec_fn'] = lambda: os.setpgrp()
             env['JPY_PARENT_PID'] = str(os.getpid())
         
         proc = Popen(cmd, **kwargs)
diff -ru src/IPython/kernel/manager.py b/IPython/kernel/manager.py
--- src/IPython/kernel/manager.py	2015-07-12 17:44:05.000000000 +0200
+++ b/IPython/kernel/manager.py	2015-09-04 15:55:07.619597332 +0200
@@ -384,18 +384,24 @@
                 from .zmq.parentpoller import ParentPollerWindows as Poller
                 Poller.send_interrupt(self.kernel.win32_interrupt_event)
             else:
-                self.kernel.send_signal(signal.SIGINT)
+                self.signal_kernel(signal.SIGINT)
         else:
             raise RuntimeError("Cannot interrupt kernel. No kernel is running!")
 
     def signal_kernel(self, signum):
-        """Sends a signal to the kernel.
+        """Sends a signal to the process group of the kernel (this
+        usually includes the kernel and any subprocesses spawned by
+        the kernel).
 
         Note that since only SIGTERM is supported on Windows, this function is
         only useful on Unix systems.
         """
         if self.has_kernel:
-            self.kernel.send_signal(signum)
+            try:
+                pgid = os.getpgid(self.kernel.pid)
+                os.killpg(pgid, signal.SIGINT)
+            except OSError:
+                self.kernel.send_signal(signum)
         else:
             raise RuntimeError("Cannot signal kernel. No kernel is running!")
 
diff -ru src/IPython/kernel/zmq/kernelbase.py b/IPython/kernel/zmq/kernelbase.py
--- src/IPython/kernel/zmq/kernelbase.py	2015-07-12 17:44:05.000000000 +0200
+++ b/IPython/kernel/zmq/kernelbase.py	2015-09-04 15:51:51.286561715 +0200
@@ -206,19 +206,27 @@
         if handler is None:
             self.log.error("UNKNOWN MESSAGE TYPE: %r", msg_type)
         else:
-            # ensure default_int_handler during handler call
-            sig = signal(SIGINT, default_int_handler)
             self.log.debug("%s: %s", msg_type, msg)
+            self.pre_handler_hook()
             try:
                 handler(stream, idents, msg)
             except Exception:
                 self.log.error("Exception in message handler:", exc_info=True)
             finally:
-                signal(SIGINT, sig)
+                self.post_handler_hook()
         
         sys.stdout.flush()
         sys.stderr.flush()
         self._publish_status(u'idle')
+
+    def pre_handler_hook(self):
+        """Hook to execute before calling message handler"""
+        # ensure default_int_handler during handler call
+        self.saved_sigint_handler = signal(SIGINT, default_int_handler)
+
+    def post_handler_hook(self):
+        """Hook to execute after calling message handler"""
+        signal(SIGINT, self.saved_sigint_handler)
     
     def enter_eventloop(self):
         """enter eventloop"""
